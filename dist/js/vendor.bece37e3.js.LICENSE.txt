/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/

/*
    * This reducer will update the state with the most recent location history
    * has transitioned to.
    */

/*
   * ConnectedRouter listens to a history object passed from props.
   * When history is changed, it dispatches action to redux store.
   * Then, store will pass props to component to render.
   * This creates uni-directional flow from history->store->router->components.
   */

/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* #__PURE__ */

/* . */

/* .CALL_HISTORY_METHOD */

/* .ClassNames */

/* .compose */

/* .compose.apply */

/* .css */

/* .getRegisteredStyles */

/* .insertStyles */

/* .jsx */

/* .keyframes */

/* .registerStyles */

/* .serializeStyles */

/* Built-in method references for those with the same name as other `lodash` methods. */

/* Built-in method references that are verified to be native. */

/* CANCEL */

/* CHANNEL_END_TYPE */

/* LOCATION_CHANGE */

/* MATCH */

/* MULTICAST */

/* Math.imul(h, m): */

/* Math.imul(k, m): */

/* Node.js helper references. */

/* ReactReduxContext */

/* Router */

/* SAGA_ACTION */

/* SAGA_LOCATION */

/* SELF_CANCELLATION */

/* TASK */

/* TASK_CANCEL */

/* TERMINATE */

/* Z+1 */

/* ["default"] */

/* appendErrors */

/* array */

/* binding */

/* colon */

/* compose.apply */

/* connect */

/* createPath */

/* css */

/* default */

/* eslint-disable */

/* eslint-disable import/prefer-default-export */

/* eslint-disable no-underscore-dangle */

/* eslint-disable no-unused-vars */

/* eslint-disable no-use-before-define, react/no-multi-comp */

/* func */

/* get */

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* harmony default export */

/* harmony export */

/* harmony import */

/* isRoot */

/* istanbul ignore next */

/* iterator */

/* jsx */

/* k >>> r: */

/* matchPath */

/* module decorator */

/* n */

/* notUndef */

/* o */

/* onLocationChanged */

/* promise */

/* reexport */

/* set */

/* string */

/* stringableFunc */

/* symbol */

/* undef */

/* unused harmony export N */

/* unused harmony export devToolsEnhancer */

/* unused harmony exports FormProvider, useController, useFieldArray, useFormContext, useFormState, useWatch */

/* unused harmony exports Global, createElement */

/* unused harmony exports SWRConfig, mutate, unstable_serialize, useSWRConfig */

/* unused harmony exports _, a, b, d */

/* unused harmony exports __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, lazy, loadableReady */

/* unused harmony exports buffer, channel, effect, iterable, multicast, number, object, observable, pattern, sagaAction, task */

/* unused harmony exports push, replace, go, goBack, goForward, routerActions */

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/*#__NOINLINE__*/

/*#__PURE__*/

/**
          Cancels the current effect; this will propagate the cancellation down to any called tasks
        **/

/**
          If this Generator has a `return` method then invokes it
          This will jump to the finally block
        **/

/**
          This Generator has ended, terminate the main task and notify the fork queue
        **/

/**
          getting TASK_CANCEL automatically cancels the main task
          We can get this value here
           - By cancelling the parent task manually
          - By joining a Cancelled task
        **/

/**
       * Asynchronously loads a component.
       */

/**
       * Asynchronously resolves(not loads) a component.
       * Note - this function does not change the state
       */

/**
       * Synchronously loads component
       * target module is expected to already exists in the module cache
       * or be capable to resolve synchronously (webpack target=node)
       */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
       * access the persistent cache
       */

/**
       * returns a cache key for the current props
       * @returns {Component|string}
       */

/**
       * sets the cache value. If called without value sets it as undefined
       */

/**
      each effect runner must attach its own logic of cancellation to the provided callback
      it allows this generator to propagate cancellation downward.
       ATTENTION! effect runners must setup the cancel logic by setting cb.cancel = [cancelMethod]
      And the setup must occur before calling the callback
       This is a sort of inversion of control: called async functions are responsible
      of completing the flow by calling the provided continuation; while caller functions
      are responsible for aborting the current flow by calling the attached cancel function
       Library users can attach their own cancellation logic to promises by defining a
      promise[CANCEL] method in their returned promises
      ATTENTION! calling cancel must have no effect on an already completed or cancelled effect
    **/

/**
     * Cachekey represents the component to be loaded
     * if key changes - component has to be reloaded
     * @param props
     * @returns {null|Component}
     */

/**
     * Resolves loaded `module` to a specific `Component
     * @param module
     * @param props
     * @param Loadable
     * @returns Component
     */

/**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */

/**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */

/**
    Tracks the current effect cancellation
    Each time the generator progresses. calling runEffect will set a new value
    on it. It allows propagating cancellation to child effects
  **/

/**
    attaches cancellation logic to this task's continuation
    this will permit cancellation to propagate down the call chain
  **/

/**
    cancellation of the main task. We'll simply resume the Generator with a TASK_CANCEL
  **/

/**
   *
   * @param {*} value
   * @param {Object} options
   * @param {*=} options.parent
   * @param {*=} options.context
   */

/**
   *
   * @param {*} value
   * @param {Object} options
   * @param {Object=} options.context
   * @param {Object=} options.parent
   */

/**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Adds a test function to the schema's queue of tests.
   * tests can be exclusive or non-exclusive.
   *
   * - exclusive tests, will replace any existing tests of the same name.
   * - non-exclusive: can be stacked
   *
   * If a non-exclusive test is added to a schema with an exclusive test of the same name
   * the exclusive test is removed and further tests of the same name will be stacked.
   *
   * If an exclusive test is added to a schema with non-exclusive tests of the same name
   * the previous tests are removed and further tests of the same name will replace each other.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * This is the generator driver
   * It's a recursive async/continuation function which calls itself
   * until the generator terminates or throws
   * @param {internal commands(TASK_CANCEL | TERMINATE) | any} arg - value, generator will be resumed with.
   * @param {boolean} isErr - the flag shows if effect finished with an error
   *
   * receives either (command | effect result, false) or (any thrown thing, true)
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   Creates a new task descriptor for this generator.
   A task is the aggregation of it's mainTask and all it's forked tasks.
   **/

/**
   Schedule the put in case another saga is holding a lock.
   The put will be executed atomically. ie nested puts will execute after
   this put has terminated.
   **/

/**
   This may be called by a parent generator to trigger/propagate cancellation
   cancel all pending tasks (including the main task), then end the current task.
    Cancellation propagates down to the whole execution tree held by this Parent task
   It's also propagated to all joiners of this task and their execution tree/joiners
    Cancellation is noop for terminated/Cancelled tasks tasks
   **/

/**
  @param t: time (elapsed)
  @param b: initial value
  @param c: amount of change
  @param d: duration
*/

/**
  Executes a task 'atomically'. Tasks scheduled during this execution will be queued
  and flushed after this task has finished (assuming the scheduler endup in a released
  state).
**/

/**
  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)
**/

/**
  Puts the scheduler in a `released` state.
**/

/**
  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the
  scheduler is released.
**/

/**
  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.
**/

/**
  Variable to hold a counting semaphore
  - Incrementing adds a lock and puts the scheduler in a `suspended` state (if it's not
    already suspended)
  - Decrementing releases a lock. Zero locks puts the scheduler in a `released` state. This
    triggers flushing the queued tasks.
**/

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */

/**
 *
 * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
 * NON-CONFORMANT EDITION.
 * © 2011 Colin Snover <http://zetafleet.com>
 * Released under MIT license.
 */

/**
 * @param {any[]} value
 * @return {number}
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * @param {any} value
 * @param {any[]} array
 * @return {any}
 */

/**
 * @param {any} value
 * @return {any}
 */

/**
 * @param {function[]} collection
 * @return {function}
 */

/**
 * @param {function} callback
 * @return {function}
 */

/**
 * @param {number}
 * @return {string}
 */

/**
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */

/**
 * @param {number} index
 * @param {number} count
 * @return {string}
 */

/**
 * @param {number} index
 * @return {string}
 */

/**
 * @param {number} type
 * @param {number} index
 * @return {number}
 */

/**
 * @param {number} type
 * @return {number}
 */

/**
 * @param {number} type
 * @return {string}
 */

/**
 * @param {number} value
 * @param {object} root
 * @param {object?} parent
 * @return {object}
 */

/**
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */

/**
 * @param {object}
 * @return {object}
 */

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 */

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 */

/**
 * @param {object} root
 * @param {object} props
 * @return {object}
 */

/**
 * @param {string[]} array
 * @param {function} callback
 * @return {string}
 */

/**
 * @param {string[]} children
 * @return {string[]}
 */

/**
 * @param {string} value
 * @param {(string|RegExp)} pattern
 * @param {string} replacement
 * @return {string}
 */

/**
 * @param {string} value
 * @param {RegExp} pattern
 * @return {string?}
 */

/**
 * @param {string} value
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */

/**
 * @param {string} value
 * @param {number} index
 * @return {number}
 */

/**
 * @param {string} value
 * @param {number} length
 * @return {number}
 */

/**
 * @param {string} value
 * @param {number} length
 * @return {string}
 */

/**
 * @param {string} value
 * @param {object | null} root
 * @param {object | null} parent
 * @param {string} type
 * @param {string[] | string} props
 * @param {object[] | string} children
 * @param {number} length
 */

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} index
 * @param {number} offset
 * @param {string[]} rules
 * @param {number[]} points
 * @param {string} type
 * @param {string[]} props
 * @param {string[]} children
 * @param {number} length
 * @return {object}
 */

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} length
 * @return {object}
 */

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {string[]} rule
 * @param {string[]} rules
 * @param {string[]} rulesets
 * @param {number[]} pseudo
 * @param {number[]} points
 * @param {string[]} declarations
 * @return {object}
 */

/**
 * @param {string} value
 * @param {string} search
 * @return {number}
 */

/**
 * @param {string} value
 * @return {any[]}
 */

/**
 * @param {string} value
 * @return {number}
 */

/**
 * @param {string} value
 * @return {object[]}
 */

/**
 * @param {string} value
 * @return {string[]}
 */

/**
 * @param {string} value
 * @return {string}
 */

/**
 * @return {number}
 */

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.
 *
 * @remarks
 * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)
 *
 * @param props - all useFrom methods
 *
 * @example
 * ```tsx
 * function App() {
 *   const methods = useForm();
 *   const onSubmit = data => console.log(data);
 *
 *   return (
 *     <FormProvider {...methods} >
 *       <form onSubmit={methods.handleSubmit(onSubmit)}>
 *         <NestedInput />
 *         <input type="submit" />
 *       </form>
 *     </FormProvider>
 *   );
 * }
 *
 *  function NestedInput() {
 *   const { register } = useFormContext(); // retrieve all hook methods
 *   return <input {...register("test")} />;
 * }
 * ```
 */

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */

/**
 * Adds query to location.
 * Utilises the search prop of location to construct query.
 */

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Based on Kendo UI Core expression code <https://github.com/telerik/kendo-ui-core#license-information>
 */

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */

/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Component based on `useController` hook to work with controlled component.
 *
 * @remarks
 * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)
 *
 * @param props - the path name to the form field value, and validation rules.
 *
 * @returns provide field handler functions, field and form state.
 *
 * @example
 * ```tsx
 * function App() {
 *   const { control } = useForm<FormValues>({
 *     defaultValues: {
 *       test: ""
 *     }
 *   });
 *
 *   return (
 *     <form>
 *       <Controller
 *         control={control}
 *         name="test"
 *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (
 *           <>
 *             <input
 *               onChange={onChange} // send value to hook form
 *               onBlur={onBlur} // notify when input is touched
 *               value={value} // return updated value
 *               ref={ref} // set ref for focus management
 *             />
 *             <p>{formState.isSubmitted ? "submitted" : ""}</p>
 *             <p>{fieldState.isTouched ? "touched" : ""}</p>
 *           </>
 *         )}
 *       />
 *     </form>
 *   );
 * }
 * ```
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */

/**
 * Converts `string` to
 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the snake cased string.
 * @example
 *
 * _.snakeCase('Foo Bar');
 * // => 'foo_bar'
 *
 * _.snakeCase('fooBar');
 * // => 'foo_bar'
 *
 * _.snakeCase('--FOO-BAR--');
 * // => 'foo_bar'
 */

/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a history object that stores locations in memory.
 */

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */

/**
 * Custom hook to mange the entire form.
 *
 * @remarks
 * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)
 *
 * @param props - form configuration and validation parameters.
 *
 * @returns methods - individual functions to manage the form state. {@link UseFormReturn}
 *
 * @example
 * ```tsx
 * function App() {
 *   const { register, handleSubmit, watch, formState: { errors } } = useForm();
 *   const onSubmit = data => console.log(data);
 *
 *   console.log(watch("example"));
 *
 *   return (
 *     <form onSubmit={handleSubmit(onSubmit)}>
 *       <input defaultValue="test" {...register("example")} />
 *       <input {...register("exampleRequired", { required: true })} />
 *       {errors.exampleRequired && <span>This field is required</span>}
 *       <input type="submit" />
 *     </form>
 *   );
 * }
 * ```
 */

/**
 * Custom hook to subscribe to field change and isolate re-rendering at the component level.
 *
 * @remarks
 *
 * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)
 *
 * @example
 * ```tsx
 * const { watch } = useForm();
 * const values = useWatch({
 *   name: "fieldName"
 *   control,
 * })
 * ```
 */

/**
 * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.
 *
 * @remarks
 * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)
 *
 * @param props - the path name to the form field value, and validation rules.
 *
 * @returns field properties, field and form state. {@link UseControllerReturn}
 *
 * @example
 * ```tsx
 * function Input(props) {
 *   const { field, fieldState, formState } = useController(props);
 *   return (
 *     <div>
 *       <input {...field} placeholder={props.name} />
 *       <p>{fieldState.isTouched && "Touched"}</p>
 *       <p>{formState.isSubmitted ? "submitted" : ""}</p>
 *     </div>
 *   );
 * }
 * ```
 */

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Expose `pathToRegexp`.
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */

/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

/**
 * Optimized internal one-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */

/**
 * Optimized internal three-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */

/**
 * Optimized internal two-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

/**
 * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Public API for matching a URL pathname to a path.
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Puts the scheduler in a `suspended` state and executes a task immediately.
 */

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */

/**
 * Returns a function that dispatches with different strategies based on the
 * object in list position (last argument). If it is an array, executes [fn].
 * Otherwise, if it has a function with one of the given method names, it will
 * execute that function (functor case). Otherwise, if it is a transformer,
 * uses transducer created by [transducerCreator] to return a new transformer
 * (transducer case).
 * Otherwise, it will default to executing [fn].
 *
 * @private
 * @param {Array} methodNames properties to check for a custom implementation
 * @param {Function} transducerCreator transducer factory if object is transformer
 * @param {Function} fn default ramda implementation
 * @return {Function} A function that dispatches on object in list position
 */

/**
 * Returns a list of all the enumerable own properties of the supplied object.
 * Note that the order of the output array is not guaranteed across different
 * JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [v]
 * @param {Object} obj The object to extract values from
 * @return {Array} An array of the values of the object's own properties.
 * @see R.valuesIn, R.keys, R.toPairs
 * @example
 *
 *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
 */

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */

/**
 * Subscribe to the cancel signal
 */

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

/**
 * Tests whether or not an object is an array.
 *
 * @private
 * @param {*} val The object to test.
 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
 * @example
 *
 *      _isArray([]); //=> true
 *      _isArray(null); //=> false
 *      _isArray({}); //=> false
 */

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

/**
 * The opposite of `_.mapValues`; this method creates an object with the
 * same values as `object` and keys generated by running each own enumerable
 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
 * with three arguments: (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapValues
 * @example
 *
 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
 *   return key + value;
 * });
 * // => { 'a1': 1, 'b2': 2 }
 */

/**
 * The public API for a <Router> that stores location in memory.
 */

/**
 * The public API for matching a single path and rendering.
 */

/**
 * The public API for prompting the user before navigating away from a screen.
 */

/**
 * The public API for rendering the first <Route> that matches.
 */

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * This action type will be dispatched when your history
 * receives a location change.
 */

/**
 * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.
 *
 * @remarks
 * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)
 *
 * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}
 *
 * @example
 * ```tsx
 * function App() {
 *   const { register, handleSubmit, control } = useForm({
 *     defaultValues: {
 *     firstName: "firstName"
 *   }});
 *   const { dirtyFields } = useFormState({
 *     control
 *   });
 *   const onSubmit = (data) => console.log(data);
 *
 *   return (
 *     <form onSubmit={handleSubmit(onSubmit)}>
 *       <input {...register("firstName")} placeholder="First Name" />
 *       {dirtyFields.firstName && <p>Field is dirty.</p>}
 *       <input type="submit" />
 *     </form>
 *   );
 * }
 * ```
 */

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */

/**
 * This method is like `_.isEqual` except that it accepts `customizer` which
 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
 * are handled by the method instead. The `customizer` is invoked with up to
 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * function isGreeting(value) {
 *   return /^h(?:i|ello)$/.test(value);
 * }
 *
 * function customizer(objValue, othValue) {
 *   if (isGreeting(objValue) && isGreeting(othValue)) {
 *     return true;
 *   }
 * }
 *
 * var array = ['hello', 'goodbye'];
 * var other = ['hi', 'goodbye'];
 *
 * _.isEqualWith(array, other, customizer);
 * // => true
 */

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */

/**
 * This middleware captures CALL_HISTORY_METHOD actions to redirect to the
 * provided history object. This will prevent these actions from reaching your
 * reducer or any middleware that comes after this one.
 */

/**
 * Throws a `Cancel` if cancellation has been requested.
 */

/**
 * Topological sorting function
 *
 * @param {Array} edges
 * @returns {Array}
 */

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 * Unsubscribe from the cancel signal
 */

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/**
 * private _uniqContentEquals function.
 * That function is checking equality of 2 iterator contents with 2 assumptions
 * - iterators lengths are the same
 * - iterators values are unique
 *
 * false-positive result will be returned for comparison of, e.g.
 * - [1,2,3] and [1,2,3,4]
 * - [1,1,1] and [1,2,3]
 * */

/**
 String representation of component state for styling with class names.

 Expects an array of strings OR a string/object pair:
 - className(['comp', 'comp-arg', 'comp-arg-2'])
   @returns 'react-select__comp react-select__comp-arg react-select__comp-arg-2'
 - className('comp', { some: true, state: false })
   @returns 'react-select__comp react-select__comp--some'
*/

/**
 Used to track a parent task and its forks
 In the fork model, forked tasks are attached by default to their parent
 We model this using the concept of Parent task && main Task
 main task is the main flow of the current Generator, the parent tasks is the
 aggregation of the main tasks + all its forked tasks.
 Thus the whole model represents an execution tree with multiple branches (vs the
 linear execution tree in sequential (non parallel) programming)

 A parent tasks has the following semantics
 - It completes if all its forks either complete or all cancelled
 - If it's cancelled, all forks are cancelled as well
 - It aborts if any uncaught error bubbles up from forks
 - If it completes, the return value is the one returned by the main task
 **/

/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @type {!Array} */

/** @type {!Object} */

/** @type {string} */

/** Built-in value references. */

/** Creates a main task to track the main flow */

/** Detect free variable `exports`. */

/** Detect free variable `global` from Node.js. */

/** Detect free variable `self`. */

/** Error message constants. */

/** Used as references for various `Number` constants. */

/** Used as the maximum memoize cache size. */

/** Used as the size to enable large array optimizations. */

/** Used for built-in method references. */

/** Used to check objects for own properties. */

/** Used to compose bitmasks for value comparisons. */

/** Used to compose unicode capture groups. */

/** Used to compose unicode character classes. */

/** Used to detect methods masquerading as native. */

/** Used to detect overreaching core-js shims. */

/** Used to detect strings that need a more robust regexp to match words. */

/** Used to detect unsigned integer values. */

/** Used to map Latin Unicode letters to basic Latin letters. */

/** Used to match Latin Unicode letters (excluding mathematical operators). */

/** Used to match property names within property paths. */

/** Used to match words composed of alphanumeric characters. */

/** Used to resolve the decompiled source of functions. */

/** Used to stand-in for `undefined` hash values. */

/** `Object#toString` result references. */

/***/

/*break*/

/*eslint func-names:0*/

/*eslint no-param-reassign:0*/

/*eslint-disable no-console*/

/*return*/

/*yield*/

//

//              1 YYYY                 2 MM        3 DD              4 HH     5 mm        6 ss            7 msec         8 Z 9 ±    10 tzHH    11 tzmm

//        req2---------------->res2

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//    new function as the true mapToProps for subsequent calls.

//    the developer that their mapToProps function is not returning a valid result.

//   TCast,

//   TContext,

//   TOutput

//   mergedSpec.nullable = base.spec.nullable;

//   mergedSpec.presence = base.spec.presence;

//   req1------------------>res1        (current one)

//   return this as any;

//  * Detects whether the mapToProps function being called depends on props, which

//  * On first call, handles mapToProps if returns another function, and treats that

//  * On first call, verifies the first result is a plain object, in order to warn

// ! + , / > @ ~ isolate token

// " '

// " ' ( [ opening delimit token

// " ' [

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// "consumed" by the delegate iterator. If context.method was

// "no subtype"

// "return" to "throw", let that override the TypeError below.

// "return", allow the original .return call to continue in the

// #950 Ensure that sparse array empty slots are validated

// $FlowFixMe

// $FlowFixMe we know it's not null

// &

// &\f

// 'm' and 'r' are mixing constants generated offline.

// (

// (f)ill-available, (f)it-content

// (inline-)?fl(e)x

// (m)ax-content, (m)in-content

// (margin|padding)-inline-(start|end)

// (min|max)?(width|height|inline-size|block-size)

// (s)ticky?

// (s)tretch

// ) ] closing delimit token

// ,

// -

// - However, we may have gotten new wrapper props after that

// - This render may have been triggered by a Redux store update that produced new child props

// - `force` is true, which is the start of polling

// - or `timer` is not 0, which means the effect wasn't canceled

// ------------------------------

// ...or invoke the function with the updated data to get the interval

// .constructor.prototype properties for functions that return Generator

// .throw, and .return (see defineIteratorMethods).

// .throw, and .return methods.

// /

// 1. this isn't strict so the casting will also have cast inner values

// 1: the menu will fit, do nothing

// 2. this is strict in which case the nested values weren't cast either

// 2: the menu will fit, if scrolled

// 3: the menu will fit, if constrained

// 4. Forked beviour when there isn't enough space below

// 4. not enough space, the browser WILL NOT increase scrollable area when

// :

// : accompanied token

// :placeholder

// :read-(only|write)

// ;

// ; { } breakpoint token

// ==============================

// > {

// ???

// @

// @ ;

// @@iterator function is called on it. Some browsers' implementations of the

// @ts-expect-error

// @ts-expect-error Lazy doesn't have concat()

// @ts-expect-error expected to work in the browser

// @ts-expect-error this is readonly

// @ts-ignore

// A .throw or .return when the delegate iterator has no .throw

// A Generator should always return itself as the iterator object when the

// A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// AUTO: flip the menu, render above

// About 1.5x faster than the two-arg version of Array#splice()

// Actually run the selector with the most recent store state and wrapper props

// Actually subscribe to the nearest connected ancestor (or store)

// Add headers to the request

// Add methods to `Hash`.

// Add methods to `ListCache`.

// Add methods to `MapCache`.

// Add methods to `SetCache`.

// Add methods to `Stack`.

// Add responseType to request if needed

// Add withCredentials to request if needed

// Add xsrf header

// After mounted or key changed.

// Allow for axios('example/url'[, config]) a la fetch API

// Allow injecting another batching function later

// Allow scroll on provided target

// Allow time travel debugging compatibility to be turned off

// Allow use of default import syntax in TypeScript

// Always update fetcher and config refs even with the Suspense mode.

// Always update fetcher and config refs.

// Always update or reset the error.

// Always update the state reference.

// Animated Scroll To

// Any reducers that existed in both the new and old rootReducer

// Array.

// Arrays

// Assign the result of the finished delegate to the temporary

// Assume cyclic values are equal.

// AsyncIterator objects; they just return a Promise for the value of

// Avoid calling selector multiple times if the store's state has not changed

// Avoid failures from read-only properties

// Avoid propagating failures to Promises returned by later

// Axios

// BOTTOM: allow browser to increase scrollable area and immediately set scroll

// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is

// Based on the previous check, one of these must be true

// Be forgiving, per 25.3.3.3.3 of the spec:

// Block option hover events when the user has just pressed a key

// But, if we have new wrapper props, those might change the child props, so we have to recalculate things.

// But, we add `isFirstRendering` to `true` to prevent double-rendering.

// By explicitly using `prop-types` you are opting into new production behavior.

// By using `bind` we don't need to modify the size of the rest arguments.

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/construct.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js

// CONCATENATED MODULE: ./node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/hash/dist/hash.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/stylis/dist/stylis.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@redux-saga/core/dist/io-6de156f3.js

// CONCATENATED MODULE: ./node_modules/@redux-saga/core/dist/redux-saga-core.esm.js

// CONCATENATED MODULE: ./node_modules/@redux-saga/deferred/dist/redux-saga-deferred.esm.js

// CONCATENATED MODULE: ./node_modules/@styled-system/background/dist/index.esm.js

// CONCATENATED MODULE: ./node_modules/@styled-system/border/dist/index.esm.js

// CONCATENATED MODULE: ./node_modules/@styled-system/color/dist/index.esm.js

// CONCATENATED MODULE: ./node_modules/@styled-system/css/dist/index.esm.js

// CONCATENATED MODULE: ./node_modules/@styled-system/grid/dist/index.esm.js

// CONCATENATED MODULE: ./node_modules/@styled-system/position/dist/index.esm.js

// CONCATENATED MODULE: ./node_modules/@styled-system/shadow/dist/index.esm.js

// CONCATENATED MODULE: ./node_modules/@styled-system/space/dist/index.esm.js

// CONCATENATED MODULE: ./node_modules/@styled-system/variant/dist/index.esm.js

// CONCATENATED MODULE: ./node_modules/connected-react-router/esm/ConnectedRouter.js

// CONCATENATED MODULE: ./node_modules/connected-react-router/esm/index.js

// CONCATENATED MODULE: ./node_modules/connected-react-router/esm/reducer.js

// CONCATENATED MODULE: ./node_modules/connected-react-router/esm/selectors.js

// CONCATENATED MODULE: ./node_modules/connected-react-router/esm/structure/plain/index.js

// CONCATENATED MODULE: ./node_modules/history/esm/history.js

// CONCATENATED MODULE: ./node_modules/nanoclone/src/index.js

// CONCATENATED MODULE: ./node_modules/ramda/es/index.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_arrayFromIterator.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_curry1.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_curry2.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_curry3.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_dispatchable.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_equals.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_has.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_includesWith.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isArguments.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isArray.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isPlaceholder.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isString.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isTransformer.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_objectIs.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_reduced.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_toISOString.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_xfBase.js

// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_xfind.js

// CONCATENATED MODULE: ./node_modules/ramda/es/keys.js

// CONCATENATED MODULE: ./node_modules/ramda/es/trim.js

// CONCATENATED MODULE: ./node_modules/ramda/es/values.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/connect.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapDispatchToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapStateToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mergeProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/selectorFactory.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/wrapMapToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useDispatch.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useReduxContext.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useStore.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/Subscription.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/batch.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/bindActionCreators.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/shallowEqual.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js

// CONCATENATED MODULE: ./node_modules/redux-saga/dist/redux-saga-effects-npm-proxy.esm.js

// CONCATENATED MODULE: ./node_modules/redux/es/redux.js

// CONCATENATED MODULE: ./node_modules/resolve-pathname/esm/resolve-pathname.js

// CONCATENATED MODULE: ./node_modules/styled-components/dist/styled-components.browser.esm.js

// CONCATENATED MODULE: ./node_modules/stylis/src/Enum.js

// CONCATENATED MODULE: ./node_modules/stylis/src/Middleware.js

// CONCATENATED MODULE: ./node_modules/stylis/src/Parser.js

// CONCATENATED MODULE: ./node_modules/stylis/src/Prefixer.js

// CONCATENATED MODULE: ./node_modules/stylis/src/Serializer.js

// CONCATENATED MODULE: ./node_modules/stylis/src/Tokenizer.js

// CONCATENATED MODULE: ./node_modules/yup/es/Condition.js

// CONCATENATED MODULE: ./node_modules/yup/es/Reference.js

// CONCATENATED MODULE: ./node_modules/yup/es/ValidationError.js

// CONCATENATED MODULE: ./node_modules/yup/es/array.js

// CONCATENATED MODULE: ./node_modules/yup/es/date.js

// CONCATENATED MODULE: ./node_modules/yup/es/locale.js

// CONCATENATED MODULE: ./node_modules/yup/es/mixed.js

// CONCATENATED MODULE: ./node_modules/yup/es/object.js

// CONCATENATED MODULE: ./node_modules/yup/es/schema.js

// CONCATENATED MODULE: ./node_modules/yup/es/string.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/ReferenceSet.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/createValidation.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/isAbsent.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/isSchema.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/isodate.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/printValue.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/sortByKeyOrder.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/sortFields.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/toArray.js

// CPS (ie node style functions) can define their own cancellation logic

// CSP to forbid Function, and you're not willing to fix either of those

// Cache was populated, update states of all hooks.

// Call delegate.iterator[context.method](context.arg) and handle the

// Capture values for checking if and when this component unmounts

// Check if it's OK to execute:

// Check if it's still the same request before deleting.

// Check if other mutations have occurred since we've started this mutation.

// Check that cyclic values are equal.

// Class Name Prefixer

// Clean Common Props

// Clean Value

// Clean up request

// Clear error.

// Client-side with `isReady` method present (SSR probably)

// Coerce booleans to `1` or `0` and dates to milliseconds.

// Coerce regexes to strings and treat strings, primitives and objects,

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Completion callback passed to the appropriate effect runner

// Component has to be reloaded on cacheKey change

// Composition Handlers

// Consumer Handlers

// Copy axios.prototype to instance

// Copy context to instance

// Create the default instance to be exported

// DCE check should happen before ReactDOM bundle executes so that

// DO NOT scroll if position is fixed

// DOM Node

// Date

// Deep compare with latest state to avoid extra re-renders.

// Default to a dummy "batch" implementation that just runs the callback

// Define Generator.prototype.{next,throw,return} in terms of the

// Define the unified helper method that is used to implement .next,

// Delay the revalidate if we have data to return so we won't block

// Deliberately forget the last sent value so that we don't

// Detect buggy property enumeration order in older V8 versions.

// DevTools can report bad minification during injection.

// Dispatch a location change action for the initial location.

// Dispatch onLocationChanged except when we're in time travelling

// Dispatch the exception by looping back around to the

// Display debug info in React DevTools.

// Distinguish between actual "data" props that were passed to the wrapper component,

// Do a few final mixes of the hash to ensure the last few

// Do optimistic data update.

// Don't bother if no value provided

// Don't inject query if it already exists in history

// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.

// Don't update the state ref for the first rendering

// Dropdown & Clear Icons

// Due to https://github.com/microsoft/TypeScript/issues/37181, we have to

// Dummy constructor functions that we use as the .constructor and

// ES6 Map

// ES6 Maps

// ES6 Set

// ES6 Sets

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 3 modules

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js

// EXTERNAL MODULE: ./node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js + 8 modules

// EXTERNAL MODULE: ./node_modules/@emotion/memoize/dist/emotion-memoize.browser.esm.js

// EXTERNAL MODULE: ./node_modules/@emotion/react/dist/emotion-element-cbed451f.browser.esm.js

// EXTERNAL MODULE: ./node_modules/@emotion/unitless/dist/unitless.browser.esm.js

// EXTERNAL MODULE: ./node_modules/@redux-saga/core/dist/io-6de156f3.js + 1 modules

// EXTERNAL MODULE: ./node_modules/@redux-saga/is/dist/redux-saga-is.esm.js

// EXTERNAL MODULE: ./node_modules/@redux-saga/symbols/dist/redux-saga-symbols.esm.js

// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// EXTERNAL MODULE: ./node_modules/lodash/has.js

// EXTERNAL MODULE: ./node_modules/lodash/mapValues.js

// EXTERNAL MODULE: ./node_modules/lodash/snakeCase.js

// EXTERNAL MODULE: ./node_modules/object-assign/index.js

// EXTERNAL MODULE: ./node_modules/prop-types/index.js

// EXTERNAL MODULE: ./node_modules/react-hook-form/dist/index.esm.mjs

// EXTERNAL MODULE: ./node_modules/react-is/index.js

// EXTERNAL MODULE: ./node_modules/react-select/dist/index-d8fed9ee.esm.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// EXTERNAL MODULE: ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js

// Enable batched updates in our subscriptions for use

// Ending with a TASK_CANCEL will propagate the Cancellation to all joiners

// Ensure headers exist

// Error event and retry logic. Only for the actual request, not

// Event captured by dropdown indicator

// Exception thrown outside of any try block that could handle

// Exit early for strings to avoid a performance hit in some environments.

// Expose Axios class to allow class inheritance

// Expose Cancel & CancelToken

// Expose `MapCache`.

// Expose all/spread

// Expose isAxiosError

// Extend parent context values and middleware.

// Extract store's location

// FIXME(ts):

// FIXME(ts): Array<typeof T>

// FIXME:

// FIXME: this should return a new instance of array without the default to be

// Factory for creating new instances

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

// Fallback for data views, maps, sets, and weak maps in IE 11,

// Flatten headers

// Flip the menu, render below

// For browsers use XHR adapter

// For global state, it's possible that the key has changed.

// For local state, compare and assign.

// For now, it's just a `Map` interface without any modifications.

// For other objects like set and map, we use this id directly as the hash.

// For the native GeneratorFunction constructor, the best we can

// Force an array if not already something iterable

// GenStateExecuting and loop back for another invocation.

// Get Scroll Parent

// Get a new error, don't use deep comparison for errors.

// Get bounding client object

// Get the default and inherited configuration.

// Getters

// HTTP basic authentication

// Handle browser request cancellation (as opposed to a manual cancellation)

// Handle cancellation

// Handle low level network errors

// Handle progress if needed

// Handle the last few bytes of the input array

// Handle timeout

// Headers whose duplicates are ignored by node

// Helper for defining the .next, .throw, and .return methods of the

// Here is the source of the request, need to tell all other hooks to

// IE 11 sometimes throws when accessing window.history.state

// IE 8 has a broken Object.defineProperty that only works on DOM objects.

// IE needs attribute set twice to normalize properties

// If React sees the exact same element reference as last time, it bails out of re-rendering

// If `revalidateOnMount` is set, we take the value directly.

// If `value` or `defaultValue` props are not empty then announce them

// If a rejected Promise was yielded, throw the rejection back

// If an exception is thrown from innerFn, we leave state ===

// If context.method was "throw" but the delegate handled the

// If data exists, only revalidate if `revalidateIfStale` is true.

// If enqueue has been called before, then we want to wait until

// If it throws an error synchronously, we shouldn't update the cache.

// If it's active, stop. It will auto revalidate when refocusing

// If it's already hashed, directly return the result.

// If it's paused, we skip revalidation.

// If key is not falsy, or not an empty array, hash it.

// If maybeInvokeDelegate(context) changed context.method from

// If module is already loaded, we use a synchronous loading

// If no cache being rendered currently (it shows a blank page),

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// If pure is true, the selector returned by selectorFactory will memoize its results,

// If the 'initial-input-focus' action has been set already

// If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

// If the child props haven't changed, nothing to do here - cascade the subscription update

// If the delegate iterator has a return method, give it a

// If the dispatched exception was caught by a catch block,

// If the path exists, push it onto the end.

// If the property has changed, update the state and mark rerender as

// If the property is accessed by the component, a rerender should be

// If the render was from a store update, clear out that reference and cascade the subscriber update

// If the request isn't interrupted, clean it up after the

// If the status is CANCELLED, then we do not need to change it here

// If the theme prop is a function, assume the function

// If there is `error`, the `error` needs to be thrown to the error boundary.

// If there is no `error`, the `revalidation` promise needs to be thrown to

// If there is no new data provided, revalidate the key with current state.

// If there're other ongoing request(s), started after the current one,

// If there's a race we don't update cache or broadcast the change,

// If there's no global state bound to the provider, create a new one with the

// If two configs are provided, merge their `use` and `fallback` options.

// If we also need to revalidate, only do it for the first hook.

// If we aren't running in "pure" mode, we don't want to memoize values.

// If we do time travelling, the location in store is changed but location in history is not changed

// If we have new child props, and the same wrapper props, we know we should use the new child props as-is.

// If we should write back the cache after request.

// If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.

// If we're not subscribed to the store, nothing to do here

// Ignore already escaped sequences.

// Ignore extraneous popstate events in WebKit.

// Ignore non-index properties.

// Ignore the `?` part of the search string e.g. ?username=codejockie

// Ignore the finally entry if control is not jumping to a

// Important!

// In Suspense mode, we can't return the empty `data` state.

// In future, preload could use `<link rel="preload">`

// In non-strict mode we allow a slash at the end of match. If the path to

// In that case, throw the error from here so it doesn't get lost.

// Initialize the hash

// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of

// Inlined version of the `symbol-observable` polyfill

// Inspired by https://github.com/garycourt/murmurhash-js

// Instead, we just default to 0 for keys we don't know.

// Invalid dates are coerced to `NaN`.

// Invalidate the key by deleting the concurrent request markers so new

// It's possible that we caught an error due to a bad mapState function, but the

// Iterate over array values

// Iterate over object keys

// Iterate over the tokens and create our regexp string.

// Iterator interface in terms of a single ._invoke method.

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Latin Extended-A block.

// Latin-1 Supplement block.

// Legacy `process.binding('util')` for Node.js < 10.

// Lifecycle

// Listen for ready state to emulate onloadend

// Listen to all scroll events, and filter them out inside of 'onScroll'

// Listen to history changes

// Many host objects are `Object` objects that can coerce to strings

// Mark it as unmounted.

// Mark loading as stopped.

// Mark the component as mounted and update corresponding refs.

// Match Express-style parameters and un-named parameters with a prefix

// Match any characters still remaining.

// Match escaped characters that would otherwise appear in future matches.

// Memoize the check that determines which context instance we should use.

// Menu Component

// Menu List

// Menu Portal

// Methods

// Microsoft

// Mimic the behavior of DOM histories by

// Misc. Instance Properties

// Mix 4 bytes at a time into the hash

// Mobile Device Detector

// Mobile Safari ignores { overflow: hidden } declaration on the body.

// Mouse Handlers

// Mozilla

// NO OP

// Need to create a new object to avoid mutating the original here.

// Node.js 0.10 has enumerable non-index properties on buffers.

// Non `Object` object instances with different constructors are not equal.

// Normalize arguments.

// Normalized Scroll Top

// Not all browsers support upload events

// Not paused, we continue handling the error. Otherwise discard it.

// Not sure about the optimal order of these conditions:

// Note that simple async functions are implemented on top of

// Note that we do this because on renders _not_ caused by store updates, we need the latest store state

// Note: ["return"] must be used for ES3 parsing compatibility.

// Now that all that's done, we can finally try to actually render the child component.

// Null/undefined/functions/etc

// O(1): faster than splice

// Object

// Object, sort keys.

// Object/function, not null/date/regexp. Use WeakMap to store the id first.

// One-arg form: push(location)

// Only multiselects support value focusing

// Only perform this synchronous loading if the component has not

// Only revalidate when the page is visible, online and not errored.

// Only update cached data if there's no error. Data can be `undefined` here.

// Otherwise add header to the request

// Otherwise, put this component's subscription instance into context, so that

// Our re-subscribe logic only runs when the store/subscription setup changes

// Override the cache if a new provider is given.

// Passive Event Detector

// PhantomJS 2 has enumerable non-index properties on typed arrays.

// Polling

// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86

// Preact uses an empty array as children by

// Prepare the response

// Prepend partial segment prefixes.

// Propagate any mapState/mapDispatch errors upwards

// Provide aliases for supported request methods

// Provider's global state might be already initialized. Let's try to get the

// Public interface

// Pull data from the store after first render in case the store has

// Push the current path onto the tokens.

// RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed

// Race Auto cancellation

// Rather than returning an object with a next method, we keep

// Re-create this selector whenever the store changes.

// React currently throws a warning when using useLayoutEffect on the server.

// React v16.11 and below

// React v16.12 and above

// React's state updates.

// Real errors are hidden from us by the browser

// Recursively compare arrays (susceptible to call stack limits).

// Recursively compare objects (susceptible to call stack limits).

// Recursively convert values (susceptible to call stack limits).

// Refs

// RegExp

// Regardless of whether this script is executing as a CommonJS module

// Remove Content-Type if data is undefined

// Remove animation props not meant for HTML elements

// Renderers

// Reset the timestamp to mark the mutation has ended.

// Resetting context._sent for legacy support of Babel's

// Resolve incomplete/relative pathname relative to current location.

// Resume execution at the desired location (see delegateYield).

// Return an iterator with no values.

// Return false from a transition hook to cancel the transition.

// Revalidate and broadcast state.

// Revalidate immediately.

// Rollback. Always populate the cache in this case but without

// SVG-related properties

// Safari 8.1 makes `arguments.callee` enumerable in strict mode.

// Safari 9 has enumerable `arguments.length` in strict mode.

// Safari 9 makes `arguments.length` enumerable in strict mode.

// SameValue algorithm

// Save references to the new child props.  Note that we track the "child props from store update"

// Schedule next interval to check again.

// Scroll Helpers

// Scroll Into View

// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.

// See https://github.com/ReactTraining/history/pull/289

// See https://github.com/facebook/regenerator/issues/274 for more details.

// Select option if option is not disabled

// Send the request

// Server-side

// Set config.method

// Set the request timeout in MS

// Set up refs to coordinate values between the subscription effect and the render logic

// Setting context._sent for legacy support of Babel's

// Setting status to CANCELLED does not necessarily mean that the task/iterators are stopped

// Since `setState` only shallowly compares states, we do a deep

// Skip index properties.

// So we can require now the module synchronously

// So we omit the values from the deps array

// So, we'll use the child props from store update only if the wrapper props are the same as last time.

// Specifically not if we're in a web worker, or react-native.

// Split on `=`, to get key and value

// Split the query string on `&` e.g. ?username=codejockie&name=Kennedy

// Standard

// Standard browser envs have full support of the APIs needed to test

// Start fetching. Change the `isValidating` state, update the cache.

// Start the request and save the timestamp.

// Store the hash first for circular reference detection before entering the

// Subscribe to store changes to check if we are in time travelling

// TODO

// TODO We're reading the store directly in render() here. Bad idea?

// TODO: Add more comments

// TODO: If another transition starts while we're still confirming

// TODO: Internal Option Type here

// TODO: We could probably make this more reliable by

// TODO: remove

// TODO: use _cast, this is double resolving

// Tell all other hooks to change the `isValidating` state.

// Test for A's keys different from B.

// The ._invoke method unifies the implementations of the .next,

// The `omitRouter` option is available for applications that must

// The child props selector needs the store reference as an input.

// The context.catch method must only be called with a location

// The delegate iterator is finished, so forget it and continue with

// The global state for a specific provider will be used to deduplicate

// The request errored out and we didn't get a response, this will be

// The root entry object (effectively a try statement without a catch

// The status here may be RUNNING or CANCELLED

// The timestamp maybe be `undefined` or a number

// The use of `Object#toString` avoids issues with the `typeof` operator

// They're not really 'magic', they just happen to work well.

// This Subscription's source should match where store came from: props vs. context. A component

// This action has a similiar effect to ActionTypes.INIT.

// This allows the user to escape special characters that won't transform.

// This avoids some unnecessary revalidations such as

// This environment has a native %IteratorPrototype%; use it instead

// This implementation is based heavily on node's url.parse

// This is a bit of a hack. We have to start listening for location

// This is a new provider, we need to initialize it and setup DOM events

// This is a polyfill for %IteratorPrototype% for environments that

// This is only done if running in a standard browser environment.

// This is used to make sure we don't warn about the same

// This makes it backward-compatible with react-router-redux.

// This means that the mutation is async, we need to check timestamps to

// This module has been marked with no SSR

// This module should not be running in strict mode, so the above

// This shouldn't happen as long as we do top-down subscriptions correctly, but

// This will likely cause Bad Things (TM) to happen in Concurrent Mode.

// Throw error or return data

// To avoid conditionally calling hooks, we fall back to a tiny wrapper

// To avoid creating an additional object, we just hang the .value

// To get around it, we can conditionally useEffect on the server (no-op) and

// To maintain the wrapperProps object reference, memoize this destructuring.

// Touch Capability Detector

// Touch Handlers

// Transform request data

// Transform response data

// Transform the result into data.

// Tricky logic here:

// Trigger a revalidation.

// Trigger the successful callback if it's the original request.

// Try/catch helper to minimize deoptimizations. Returns a completion

// Two-arg form: push(path, state)

// UNUSED EXPORTS: $, H, I, K, L, M, N, O, Q, U, V, W, X, Y, Z, a0, a1, a2, a3, a4, a5, a6, a7, c, n, w, x

// UNUSED EXPORTS: CALL_HISTORY_METHOD, LOCATION_CHANGE, createMatchSelector, getAction, getHash, getLocation, getRouter, getSearch, go, goBack, goForward, onLocationChanged, push, replace, routerActions, routerMiddleware

// UNUSED EXPORTS: CANCEL, END, SAGA_LOCATION, buffers, channel, detach, eventChannel, isEnd, multicastChannel, runSaga, stdChannel

// UNUSED EXPORTS: MemoryRouter, Prompt, Redirect, StaticRouter, __HistoryContext, __RouterContext, generatePath, useLocation, useRouteMatch, withRouter

// UNUSED EXPORTS: NonceProvider, components, createFilter, defaultTheme, mergeStyles, useStateManager

// UNUSED EXPORTS: ServerStyleSheet, StyleSheetConsumer, StyleSheetContext, StyleSheetManager, ThemeConsumer, ThemeContext, __PRIVATE__, createGlobalStyle, isStyledComponent, keyframes, useTheme, version, withTheme

// UNUSED EXPORTS: __DO_NOT_USE__ActionTypes, bindActionCreators

// UNUSED EXPORTS: actionChannel, apply, call, cancel, cancelled, cps, debounce, delay, effectTypes, flush, fork, getContext, join, put, putResolve, race, retry, select, setContext, spawn, take, takeEvery, takeLatest, takeLeading, takeMaybe, throttle

// UNUSED EXPORTS: alignContent, alignItems, alignSelf, background, backgroundImage, backgroundPosition, backgroundRepeat, backgroundSize, border, borderBottom, borderColor, borderLeft, borderRadius, borderRight, borderStyle, borderTop, borderWidth, borders, bottom, boxShadow, buttonStyle, color, colorStyle, compose, createParser, createStyleFunction, display, flex, flexBasis, flexDirection, flexGrow, flexShrink, flexWrap, flexbox, fontFamily, fontSize, fontStyle, fontWeight, get, grid, gridArea, gridAutoColumns, gridAutoFlow, gridAutoRows, gridColumn, gridColumnGap, gridGap, gridRow, gridRowGap, gridTemplateAreas, gridTemplateColumns, gridTemplateRows, height, justifyContent, justifyItems, justifySelf, left, letterSpacing, lineHeight, margin, maxHeight, maxWidth, minHeight, minWidth, opacity, order, overflow, overflowX, overflowY, padding, position, right, shadow, size, style, system, textAlign, textShadow, textStyle, top, typography, variant, verticalAlign, width, zIndex

// UNUSED EXPORTS: batch, connectAdvanced, createDispatchHook, createSelectorHook, createStoreHook, shallowEqual, useStore

// UNUSED EXPORTS: createHashHistory, locationsAreEqual, parsePath

// Under suspense mode, it will always fetch on render if there is no

// Unsubscribe events.

// Update history's location to match store's location

// Update the current hook's state.

// Update the state if it's new, or the provider has been extended.

// Use `util.types` for Node.js 10+.

// Use a negative lookahead to match only capturing groups.

// Use onloadend if available

// Use the default theme if there are no customizations.

// Use the passed interval

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.

// Using noop() as the undefined value as undefined can possibly be replaced

// Values of other types are only equal if identical.

// Verify that the code above has been dead code eliminated (DCE'd).

// We can only set state if it's safe (still mounted with the same key).

// We can remove it whenever the bug is fixed.

// We don't expect any of the above to throw, but better to be safe.

// We don't want to return `null` for nullable schema

// We get TERMINATE flag, i.e. by taking from a channel that ended using `take` (and not `takem` used to trap End of channels)

// We memoize the elements for the rendered child component as an optimization.

// We might want to inject an extra layer on top of `provider` in the future,

// We need this to execute synchronously every time we re-render. However, React warns

// We only start next interval if `refreshInterval` is not 0, and:

// We run load function, we assume that it won't fail and that it

// We use React.Children.forEach instead of React.Children.toArray().find()

// We want to capture the wrapper props and child props we used for later comparisons

// When `key` updates, reset the state to the initial value

// When a store is created, an "INIT" action is dispatched so that every

// When a yielded Promise is resolved, its final value becomes

// When listening to the native events for auto revalidations,

// When there is no prior location and pathname is empty, set it to /

// When un-mounting, we need to remove the cache provider from the state

// With one exception: request that using file: protocol, most browsers

// Within the body of any async function, `await x` is transformed to

// XXX: this is using the Base schema so that `addMethod(mixed)` works as a base class

// \

// \0 \t \n \r \s whitespace token

// \0 }

// \t \n \r \s

// ] ) " '

// `data` is a function, call it passing current cache value.

// `fn` and `config` might be changed during the lifecycle,

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// `maxTouchPoints` works on IE10/11 and Surface

// `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in

// `ontouchstart` check works on most browsers

// `setState` is immutable, and `eventsCallback`, `fnArgs`, `keyInfo`,

// `undefined` specifically means uninitialized, as opposed to

// `useSWR('key', () => fetch('/api/'), { suspense: true })`

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// about useLayoutEffect in SSR, so we try to detect environment and fall back to

// absolutely positioned element rendered above the viewport (only below).

// accidentally pass it on to the delegate.

// account for possible declaration `width: 100%;` on body

// account for touch devices

// aliased for consumers

// align-content

// align-items

// align-self

// all previous Promises have been resolved before calling invoke,

// allow arbitrary sub-second precision beyond milliseconds

// allow detectFactoryAndVerify to get ownProps

// allow undefined days and months

// allowing connectAdvanced's shouldComponentUpdate to return false if final

// already have an existing method we want to call, so there's no need

// also ensures that the minifier will not anonymize the function.

// always return early for non validation errors

// ancestor components re-render before descendants

// and .done properties off the next function object itself. This

// and `keyValidating` are depending on `key`, so we can exclude them from

// and optional suffixes. Matches appear as:

// and there will be very few iterations of this generally

// and trigger a rerender if necessary.

// and values needed to control behavior (forwarded refs, alternate context instances).

// and we could have a special build just for that

// and when it should just concatenate the outer and inner selectors

// and you can only have one source map per style tag

// animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

// any necessary setup in a predictable way. This predictability

// anything else returned as is

// appearance, user-select, transform, hyphens, text-size-adjust

// apply the lock styles and padding if this is the first scroll lock

// argument that corresponds to a known catch block.

// as a ref instead of a useState/useReducer because we need a way to determine if that value has

// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring

// as the detection for this (below) is error prone in apps where the

// assignment should always work unless something is misconfigured. Just

// async functions in terms of async generators, it is especially

// available, otherwise a store update may happen between render and the effect,

// avoid NaN timestamps caused by “undefined” values being passed to Date.UTC

// avoid race conditions.

// avoid re-renders if the placement has not changed

// background, background-image

// background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

// bail early if no element is available to attach to

// bail early if no element is available to detach from

// bail early if required elements aren't present

// based on https://github.com/developit/dlv

// based on https://github.com/thysultan/stylis.js/blob/e6843c373ebcbbfade25ebcc23f540ed8508da0a/src/Tokenizer.js#L239-L244

// because this module is primarily intended for the browser and node

// been marked with no SSR, else we risk hydration mismatches

// been processed.  If this went into useState/useReducer, we couldn't clear out the value without

// best way to handle this.

// bottom limit

// but it's also required in react native and similar environments sometimes

// but they might be changed every render like this.

// but this is much easier and the native packages

// by any combination of letters, digits, plus, period, or hyphen.

// by setting cancel field on the cb

// by something else.  Prettier ignore and extra parentheses are necessary here

// bytes are well-incorporated.

// c.f. https://nodejs.org/api/http.html#http_message_headers

// call invoke immediately, without waiting on a callback to fire,

// callback case is for nested validations

// cancel mouse events when disabled

// cancel scroll

// cannot get keys using array notation with DOMRect

// case 1

// case 2

// case 3

// cast it to any for now.

// catch synchronous failures; see #152

// catch synchronous failures; see #152 and #441

// causing a render after a cancelled POP.

// chance to clean up.

// change of a key triggers loading state automatically

// changed

// changed since we began.

// changes here in the constructor in case there are any <Redirect>s

// charcode for b

// charcode for l

// check for unknown nodes

// check will fail and we'll handle the `child` part on the next iteration like normal

// class name could be used further down

// close the menu if the user taps outside

// colon

// color-adjust

// comma

// comparison here.

// component at different URLs.

// component might be resolved synchronously in the constructor

// config.suspense isn't allowed to change during the lifecycle

// connected descendants won't update until after this component is done

// connected to the store via props shouldn't use subscription from context, or vice versa.

// const UNSET = 'unset' as const;

// const m = 0x5bd1e995;

// const r = 24;

// context.dispatchException(context.arg) call above.

// context.method was "next", forget context.arg since it has been

// cover IE < 9 keys issues

// createConnect with default args builds the 'official' connect behavior. Calling it with

// current iteration.

// cursor

// d m s

// data and newData are deeply equal

// deduped ones.

// deduplication interval.

// default, so use null if that's the case.

// defensive measure

// delegate iterator, or by modifying context.method and context.arg,

// dependencies not ready

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// despite having improperly defined `toString` methods.

// different options opens up some testing and extensibility scenarios

// display: (flex|inline-flex)

// do is to check its .name property.

// do not bubble up synchronous failures for detached forks

// document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)

// don't capture the event if the menu opens on focus and the focused

// don't cycle from the start to the end

// don't hoist over string (html) components

// don't natively support it.

// during the app's lifetime. Detection could be much improved if Redux DevTools

// effects in the iterator's finally block will still be executed

// encapsulates the subscription logic for connecting a component to the redux store, as

// enqueue has not been called before, then it is important to

// ensure focus is on the Input when the menu opens

// ensure focus is restored correctly when the control becomes enabled

// ensure latest selected state is reused so that a custom equality function can result in identical references

// ensure select state gets blurred in case Select is programatically disabled while focused

// eslint-disable-line no-alert

// eslint-disable-line no-new-wrappers

// eslint-disable-line no-unused-vars

// eslint-disable-next-line

// eslint-disable-next-line @typescript-eslint/no-unused-vars

// eslint-disable-next-line consistent-return

// eslint-disable-next-line func-names

// eslint-disable-next-line no-param-reassign

// eslint-disable-next-line no-underscore-dangle

// eslint-disable-next-line react-hooks/exhaustive-deps

// eslint-disable-next-line react/no-did-update-set-state

// even though it might cause unexpected behaviors.

// events

// exception, let the outer generator proceed normally. If

// execute code before the first await. Since we implement simple

// executor callback, and why async functions synchronously

// fallthrough

// filter out skipped interceptors

// finalize string values (regular strings and functions interpolated into css calls)

// fired after immediate JavaScript executions, which can possibly be

// flex, flex-direction

// flex-basis

// flex-grow

// flex-shrink

// focus revalidate

// for data views in Edge < 14, and promises in Node.js.

// for more details.

// force css to recompute when value change due to @emotion bug.

// forcing another re-render, which we don't want.

// function.sent implementation.

// get SSRed styles out of the way of React's hydration

// get a new location before the <Router> is mounted.

// get rid of any default styles

// global state associated with the provider first.

// handled by onerror instead

// handles 'first'

// has a stable shape and so hopefully should be cheap to allocate.

// have a Router instance higher in the component tree but still desire

// have been (and was previously) designed to take a closure to be

// here because toArray adds keys to all child elements and we do not want

// hit reducers

// horizontal(-)tb

// http://fb.me/prop-types-in-prod

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://esbench.com/bench/5b809c2cf2949800a0f61fb5

// https://github.com/rafgraph/detect-it/blob/main/src/index.ts#L19-L36

// https://github.com/vercel/swr/issues/1680.

// https://github.com/vercel/swr/pull/1058

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// i.e. a generator function returns an iterator

// if (combined.spec.nullable === UNSET)

// if (combined.spec.presence === UNSET)

// if *a* array contains any element that is not included in *b*

// if a Content Security Policy forbids using Function, but in that case

// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes

// if promise exists, but rejected - clear cache

// if the nested value is a schema we can skip cloning, since

// if there is no default set invent one

// if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)

// if we ever do those wrong, this throw will surface the error in our tests.

// ignore mouse events that weren't triggered by the primary button

// ignore the keydown event from an Input Method Editor(IME)

// important to get this right, even though it requires care.

// important! this hides the flashing cursor

// important! without `width` browsers won't allow focus

// in Safari 8-9 which returns 'object' for typed array and other constructors.

// in Safari 9 which returns 'object' for typed arrays and other constructors.

// in case runtime.js accidentally runs in strict mode, in modern engines

// in every case, so we don't have to touch the arguments object. The

// in non-ending mode, where "/test/" shouldn't match "/test//route".

// in these cases the current part is the next schema and should be processed

// in this iteration. For cases where the index signature is included this

// increment active scroll locks

// injected easily by `bin/regenerator --include-runtime script.js`.

// inner fields are always strict:

// innerOptions.value = value[prop];

// instead create a failed task. See #152 and #441

// into the async generator function so it can be handled there.

// invocations of the iterator.

// invoked without arguments, but in all the cases we care about we

// is created synchronously, otherwise a store update may occur before the

// is re-rendered, the selectors are called again, and

// is ready - was loaded during SSR process

// is ready - was loaded in this session

// is valid at the end of a path match, not in the middle. This is important

// is why the Promise constructor synchronously invokes its

// it should be safe to broadcast the stale data

// it's 1 in dev because we insert source maps that map a single rule to a location

// it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here

// it, so set the completion value of the entire function to

// item

// iterator prototype chain incorrectly implement this, causing the Generator

// its own modifications.

// just return the data.

// just useEffect instead to avoid the warning, since neither will run anyway.

// justify-content

// keeping a list of keys we've seen in sessionStorage.

// key is the value of the data-emotion attribute, it's used to identify different sheets

// keys multiple times.

// kicks up the generator

// knows how to merge the passed-in default theme with

// listeners for `focus` and `reconnect` actions.

// load sync is expecting component to be in the "loading" state already

// location outside the try/catch block.

// locations where there is no enclosing try statement.

// make certain babel optimisations not possible

// manually add the new tests to ensure

// manually merge the blacklist/whitelist (the other `schema` takes

// mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

// match already ends with a slash, we remove it for consistency. The slash

// may need to be constrained after flipping

// means that the style elements we're looking at are only Emotion 11 server-rendered style elements

// meant to be awaited.

// method always terminates the yield* loop.

// might use a different theme context in the future anyway

// minifier not to mangle the names of these two functions.

// monitors are expected to have a certain interface, let's fill-in any missing ones

// multi select, by default, IS clearable

// multiSelected items are usually items that have already been selected

// needed.

// negative .length indicates that this rule has been already prefixed

// new mutate function.

// not passing the registered cache to serializeStyles because it would

// not the most efficient thing ever but this is a pretty rare case

// note this very very intentionally targets all style elements regardless of the key to ensure

// nothing to revalidate, just update the status

// object and shouldComponentUpdate will always return true.

// object to not be returned from this call. This ensures that doesn't happen.

// objects. For full spec compliance, you may wish to configure your

// of the polyfill.

// on events on child elements, not the document (which we've attached this handler to).

// on the initial render. If there are, they will replace/push when

// onerror should only fire if it's a network error

// only additional allocation required is the completion record, which

// only scroll if the menu isn't already open

// option is already selected; it breaks the flow of navigation

// options object:

// or a finally block) gives us a place to store values thrown from

// or not, return the runtime object so that we can declare the variable

// or reconnecting.

// or set by the user as a default value so we assume they are not disabled

// order

// outer generator.

// parent re-rendered without this component and we're about to unmount.

// passed through to selectorFactory

// position: sticky

// positioning behaviour is almost identical for portalled and fixed,

// positive .length indicates that this rule contains pseudo

// precedence in case of conflicts)

// pretend we've started with a comma

// prettier-ignore

// prevents cancelling an already completed effect

// prevents unnecessary cancellation

// probably be avoided if Subscription's listeners logic is changed to not call listeners

// problems, please detail your unique predicament in a GitHub issue.

// propagates cancel downward

// props have not changed. If false, the selector will always return a new

// provide some affordance on touch devices

// providers

// readystate handler is calling before onerror or ontimeout handlers,

// reapply original body styles, if any

// record like context.tryEntries[i].completion. This interface could

// recursive `stableHash` calls.

// reducer returns their initial state. This effectively populates

// ref. https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode

// reference, so return the new value at the same index

// regeneratorRuntime in the outer scope, which allows this module to be

// registration has to happen here as the result of this might get consumed by `cx`

// remove cursor on desktop

// remove cursor on mobile whilst maintaining "scroll into view" behaviour

// remove touch listeners

// rendering.

// requests and store listeners. As well as a mutate function that bound to

// requests will not be deduped.

// required for offset[Height, Top] > keyboard scroll

// reset bottom/top flags

// reset move vars

// resolve iterator

// result, either by returning a { value, done } result from the

// retrieve loading promise from a global cache

// revalidate on reconnected

// root path: ''

// safe to mutate since this is fired in sequence

// safely decrement active scroll locks

// scroll the focused option into view if necessary

// select-option when !isMulti does not return option so we assume selected option is value

// separator doesn't make sense without the dropdown indicator

// set touch start so we can calculate touchmove delta

// setting context.delegate to null, and returning the ContinueSentinel.

// setup cancellation logic on the parent cb

// short-circuit for the simplest case

// simply set a global variable like `REDUX_DEVTOOLS_IS_TIME_TRAVELLING=true`.

// single select, by default, IS NOT clearable

// so give them whatever is available below rather than the minHeight.

// so that results are always delivered in the correct order. If

// so that the async generator function has the opportunity to do

// so that using `css` from `emotion` and passing the result to the css prop works

// so we don't have to add it to registered cache.

// so we should call onloadend on the next 'tick'

// so we use the same component. the actual portalling logic is forked

// some updates should toggle the state of the input visibility

// something went wrong, return default state

// sometimes the array index part of a path doesn't exist: "nested.arr.child"

// sort object-based responsive styles

// sounds weird, but loading=true is the initial state of InnerLoadable

// space

// stale data so no need to revalidate immediately on mount again.

// start with the current tests

// stic(k)y

// storage too because it's a side-effect. Otherwise when re-mounting we

// store any styles already applied to the body

// store may be unmounted, a navigation occurs, and then the store is re-mounted

// stretch, max-content, min-content, fill-available

// strict mode using a global Function call. This could conceivably fail

// stylis inserts \f after & to know when & where it should replace this sequence with the context selector

// subscription callback always has the selector from the latest render commit

// subscription is created and an inconsistent state may be observed

// such as key serialization, auto GC, etc.

// svg

// switches

// text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

// that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

// that creating a cache works inside of render of a React component

// that have been unsubscribed in the  middle of the notification loop.

// that just executes the given callback immediately.

// the .value of the Promise<{value,done}> result for the

// the big drawback is that the css won't be editable in devtools

// the cache will never be null in the browser

// the cache.

// the deduping logic is consistent

// the deps array.

// the final result produced by the iterator.

// the focused value is still in the selectValue, return it

// the focusedValue is not present in the next selectValue array by

// the initial state tree.

// the matched portion of the URL

// the max length is how many rules we have per style tag, it's 65000 in speedy mode

// the menu is rendered

// the method takes exactly one argument, since that happens to be true

// the middle of the notification loop, where `subscription` will then be null. This can

// the new state tree with any relevant data from the old one.

// the outer generator.

// the path used to match

// the previous one, we may end up in a weird state. Figure out the

// the proper solution is to fix the accidental strict mode problem. If

// the request that fired later will always be kept.

// the suspense boundary.

// the tree but if it's a string tag, we know it won't

// then let that catch block handle the exception normally.

// then reset the ariaSelection to null

// then return the task descriptor to the caller

// then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"

// there can be only a single saga error created at any given moment

// therefore not reporting its length accurately..

// they are already immutable

// they mount and since cDM fires in children before parents, we may

// things simple and return the next function itself.

// this flag is needed for handling `strict` correctly in the context of

// this function wraps mapToProps in a proxy function which does several things:

// this ignores label

// this improves memory usage since we can avoid storing the whole style string

// this is a convenience for when users only supply a single pair

// this is not 100% correct, we don't account for literal sequences here - like for example quoted strings

// this is the ultrafast version, works across browsers

// this means we will ignore elements which don't have a space in them which

// this weirdness brought to you by firefox

// this._validating = true;

// throw the exception.

// timeouts

// timestamps without timezone identifiers should be considered local time

// to create a new function object. We can even get away with assuming

// to determine what the child props should be

// to determine what the child props should be.

// to ensure that tsc doesn't remove the __NOINLINE__ comment.

// to is absolute

// to is relative, drop the filename

// to prevent the double-rendering issue on initilization

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// to trigger an unmount/remount for two <Route>s that render the same

// to use connected-react-router for its Redux integration.

// tracks down the current cancel

// transforming the data.

// transition

// triggered.

// triggers a synchronous loading of the module

// unified ._invoke helper method.

// update their states.

// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

// use web preset by default

// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store

// useSWR

// used in error messages

// used to compute Connect's displayName from the wrapped component's displayName.

// user handled the error, we can clear bookkept values

// using a global regex with .exec is stateful so lastIndex has to be reset each time

// utils is a library of generic helper functions non-specific to axios

// validation vs just casting. e.g strict() on a field is only used when validating

// value is cast, we can check if it meets type requirements

// variable specified by delegate.resultName (see delegateYield).

// vertical-l(r)

// vertical-r(l)

// we can explicitly access globalThis. In older engines we can escape

// we can't trust `scrollParent.scrollHeight` --> it may increase when

// we ignore all errors here, since when the component

// we intentionally put a delay (setTimeout) here to make sure they are

// we know that it won't be needed anymore and we need to clear it

// we need to ignore the current one to avoid possible race conditions:

// we only need to add the styles to the registered cache if the

// we start at 1 since we've already handled the first arg

// we trigger the loading slow event.

// we want to provide as much of the menu as possible to the user,

// we're checking on event.target here instead of event.currentTarget, because we want to assert information

// we're doing this to avoid preconstruct's dead code elimination in this one case

// we've dumped the saga stack to string and are passing it to user's code

// well as nesting subscriptions of descendant components, so that we can ensure the

// when the Select is initially focused

// when the select value should change, we should reset focusedValue

// whether mapToProps needs to be invoked when props have changed.

// whether or not we matched exactly

// whether the request URL is of the same origin as current location.

// which may cause missed updates; we also must ensure the store subscription

// will not re-register those event listeners.

// will receive the previous state. This effectively populates

// will return status as 0 even though it's a successful request

// will throw again, if neither props nor store state

// with a scroll distance, we perform scroll on the element

// with standard React renderers (ReactDOM, React Native)

// withContext<TContext extends AnyObject>(): BaseSchema<

// within the component based on `menuPosition`

// writing-mode

// you've misconfigured your bundler to force strict mode and applied a

// {

// { rule/at-rule

// }

// } ; \0

//# sourceMappingURL=index.esm.mjs.map

//# sourceMappingURL=react-router.js.map

//# sourceMappingURL=styled-components.browser.esm.js.map

//# sourceMappingURL=yup.module.js.map

//-- transforms --

//className

//should ignore nulls here

//show parent errors after the nested ones: name.first, name
